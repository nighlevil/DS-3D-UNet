
# 1. SETUP BASE IMAGE
# --------
FROM nvidia/cuda:10.2-base-ubuntu18.04
# base image as starting point (from NVIDIA dockerhub)

LABEL version="1.0"
LABEL maintainer="antonio.garciauceda89@gmail.com" location="Rotterdam" type="Hospital" role="Airway Segmentation Method"


# 2. SETUP BASE LINUX REQUIREMENTS
# --------
RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get install -y --no-install-recommends python3.8 python3-pip python3-setuptools && \
    apt-get clean
# "--no-install-recommends" to avoid not-needed dependencies and create a lighter image
# "apt-get clean" to clean up cache memory and reduce image size
# "git-lfs" because the models are stored in Git-LFS system


# 3. SETUP CODE AND PYTHON REQUIREMENTS
# --------
WORKDIR /opt/bronchinet

COPY ["./src/", "./src/"]
COPY ["./setup.py", "./"]
COPY ["./requirements_torch.txt", "./requirements.txt"]
# copy files from local dir (this repository) to that inside the container
#   destination path relative to WORKDIR

ENV PYTHONPATH "/opt/bronchinet/src/"

RUN pip3 install -r "./requirements.txt"


# 4. PREPARE WORKSPACE
# --------
WORKDIR /workdir

ARG MODELDIR=./models/
# used-defined variable: to specify other paths for models
#   in docker build: --build-arg MODELDIR=<desired_path> (default "./models/")

COPY ["${MODELDIR}", "./models/"]
# destination path now relative to WORKDIR="/workdir/"

RUN mkdir "./input_data/"
RUN mkdir "./results/"
# folders for input data / output results, to be mounted from local dirs in docker run

RUN ln -s "/opt/bronchinet/" "./Code"
RUN ln -s "./input_data/" "./BaseData"


# 5. FINALISE
# --------
ENTRYPOINT ["/bin/bash", "./models/run_model_trained.sh"]
# command to execute when running docker

CMD ["./input_data/", "./results/", "--torch"]
# input arguments to script in entrypoint

# FOR DEBUGGING: comment-out the commands above, and uncomment the ones below
#RUN apt-get install -y vim
#ENTRYPOINT ["/bin/bash"]
